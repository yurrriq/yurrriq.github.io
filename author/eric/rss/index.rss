<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Eric Bailey - i can haz blog?</title><description>Varyingly incoherent ramblings of a hacker/musician.</description><link>http://blog.ericb.me/</link><generator>Ghost 0.6</generator><lastBuildDate>Sat, 02 May 2015 07:45:55 GMT</lastBuildDate><atom:link href="http://blog.ericb.me/author/eric/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>GitHub Languages</title><description>&lt;p&gt;I wrote a little Clojure script (not to be confused with ClojureScript) to gather the language usage data from my GitHub repos and sort them in descending order of popularity.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;{
  "Ruby" : 4401525,
  "Java" : 1800870,
  "Clojure" : 1406457,
  "LilyPond" : 226858,
  "Scheme" : 224389,
  "Common Lisp" : 127554,
  "HTML" : 111217,
  "Shell" : 47589,
  "CSS" : 41034,
  "Groff"&lt;/code&gt;&lt;/pre&gt;</description><link>http://blog.ericb.me/2015/05/02/github-languages/</link><guid isPermaLink="false">713f4b2a-5ac8-4a01-b3f0-35d36fda8bba</guid><dc:creator>Eric Bailey</dc:creator><pubDate>Sat, 02 May 2015 07:37:40 GMT</pubDate><content:encoded>&lt;p&gt;I wrote a little Clojure script (not to be confused with ClojureScript) to gather the language usage data from my GitHub repos and sort them in descending order of popularity.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;{
  "Ruby" : 4401525,
  "Java" : 1800870,
  "Clojure" : 1406457,
  "LilyPond" : 226858,
  "Scheme" : 224389,
  "Common Lisp" : 127554,
  "HTML" : 111217,
  "Shell" : 47589,
  "CSS" : 41034,
  "Groff" : 25188,
  "C++" : 16378,
  "NewLisp" : 15399,
  "JavaScript" : 12714,
  "Erlang" : 8041,
  "Objective-C" : 3825,
  "Python" : 3285,
  "Perl6" : 2976,
  "PLSQL" : 2919,
  "Scala" : 2814,
  "Emacs Lisp" : 2420,
  "OCaml" : 2055,
  "Elixir" : 1788,
  "CoffeeScript" : 1787,
  "PHP" : 1704,
  "CMake" : 1618,
  "Lua" : 1160,
  "Go" : 1025,
  "Perl" : 844,
  "Haskell" : 801,
  "F#" : 799,
  "C#" : 585,
  "PostScript" : 485,
  "Swift" : 467,
  "Makefile" : 220,
  "Frege" : 53
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I don't use Ruby, except when contributing to &lt;a href="http://brew.sh"&gt;Homebrew&lt;/a&gt; via &lt;a href="https://github.com/yurrriq/homebrew"&gt;my fork&lt;/a&gt;. I also have a repo or two of &lt;a href="https://github.com/yurrriq/exercism"&gt;polyglot coding exercises&lt;/a&gt;, which, of course, skew the results.&lt;/p&gt;

&lt;p&gt;For the script an example config, check out &lt;a href="https://gist.github.com/yurrriq/3272c6b9ebfa699472b9"&gt;the gist&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title>#'clj-util.get-some/get-some</title><description>A simple Clojure function for getting some value of interest out of a map.</description><link>http://blog.ericb.me/2015/02/01/get-some/</link><guid isPermaLink="false">e38f8736-f752-4df2-b61b-d8ca9dd210c8</guid><dc:creator>Eric Bailey</dc:creator><pubDate>Sun, 01 Feb 2015 23:05:00 GMT</pubDate><content:encoded>&lt;p&gt;Sometimes I have a map with a number of different potential keys of interest, e.g. the &lt;a href="https://github.com/ring-clojure/ring/blob/ead617ee338e9f50c5380333ebfed87a747496dd/SPEC#L84-L87" target="_blank"&gt;&lt;code&gt;:headers&lt;/code&gt;&lt;/a&gt; of a Ring request map. In such a case, I might want to get the value of the first of those keys that's present.&lt;/p&gt;

&lt;p&gt;For this rare (but not quite edge) case, I wrote a simple loop to &lt;a href="https://www.youtube.com/watch?v=CwQHwx-sjlw" target="_blank"&gt;get some&lt;/a&gt; value of interest.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-clojure"&gt;(defn get-some [m &amp;amp; ks]
  (loop [ks ks]
    (when (seq ks)
      (or (get m (first ks))
          (recur (rest ks))))))

;; Example usage
(get-some (:headers req)
  :content-type "content-type" :accept "accept")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="seealso"&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gdeer81/marginalia" target="_blank"&gt;Marginalia&lt;/a&gt;-generated &lt;a href="http://yurrriq.github.io/clj-util/clj-util.get-some.html" target="_blank"&gt;"literate" source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yurrriq/clj-util" target="_blank"&gt;clj-util on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title>exercism.io</title><description>Hello, world! I started working on the Clojure exercises from exercism.io. Feel free to nitpick my solutions, and browse the source on GitHub.</description><link>http://blog.ericb.me/2015/01/03/exercism-io/</link><guid isPermaLink="false">1ca45d03-8f02-4ed2-842f-5fb86f5167da</guid><dc:creator>Eric Bailey</dc:creator><pubDate>Sat, 03 Jan 2015 23:16:32 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href="http://xkcd.com/353/" target="_blank"&gt;Hello, world!&lt;/a&gt; I started working on the Clojure exercises from &lt;a href="http://exercism.io" target="_blank"&gt;exercism.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Feel free to &lt;a href="http://help.exercism.io/nitpicking-code.html" target="_blank"&gt;nitpick&lt;/a&gt; &lt;a href="http://exercism.io/yurrriq" target="_blank"&gt;my solutions&lt;/a&gt;, and browse the source &lt;a href="https://github.com/yurrriq/exercism/tree/master/clojure" target="_blank"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Maybe this will prove to be a fun way to explore different languages.&lt;/p&gt;</content:encoded></item><item><title>#'clojure.core/some-&gt; and the Power of Macros</title><description>Homoiconicity, and metaprogramming, and macros! Oh my! In 2015, my love for these elegant weapons will undoubtedly grow fonder.</description><link>http://blog.ericb.me/2015/01/02/the-power-of-macros/</link><guid isPermaLink="false">cdeff5b0-aa13-4932-a698-86fdc6c16db2</guid><dc:creator>Eric Bailey</dc:creator><pubDate>Sat, 03 Jan 2015 00:45:25 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href="http://calculist.org/blog/2012/04/17/homoiconicity-isnt-the-point/" target="_blank"&gt;Homoiconicity&lt;/a&gt;, and &lt;a href="https://twitter.com/yurrriq/status/536036269222936576" target="_blank"&gt;metaprogramming&lt;/a&gt;, and &lt;a href="http://learnxinyminutes.com/docs/clojure-macros/" target="_blank"&gt;macros&lt;/a&gt;! Oh my!&lt;/p&gt;

&lt;p&gt;In 2015, my love for these &lt;a href="http://xkcd.com/297/" target="_blank"&gt;elegant weapons&lt;/a&gt; will undoubtedly &lt;a href="https://twitter.com/yurrriq/status/525703812833890305" target="_blank"&gt;grow fonder&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-clojure"&gt;(comment
  ;; #'clojure.core/some-&amp;gt; is one my favorite Clojure macros.
  (some-&amp;gt; (meta #'clojure.core/some-&amp;gt;) :doc println)
  ;; When expr is not nil, threads it into the first form (via -&amp;gt;),
  ;; and when that result is not nil, through the next etc

  (macroexpand '(some-&amp;gt; (meta #'clojure.core/some-&amp;gt;) :doc println))

  (let* [G__2986 (meta (var clojure.core/some-&amp;gt;))
         G__2986 (if (clojure.core/nil? G__2986)
                   nil
                   (clojure.core/-&amp;gt; G__2986 :doc))
         G__2986 (if (clojure.core/nil? G__2986)
                   nil
                   (clojure.core/-&amp;gt; G__2986 println))]
    G__2986)

  ;; Rewritten more readably to illustrate the point:
  (let [example (meta #'clojure.core/some-&amp;gt;)
        example (when-not (nil? example)
                  (:doc example))
        example (when-not (nil? example)
                  (println example))]
    example)

  ;; Which brings me to another of my scattered thoughts,
  ;; Clojure has the #'clojure.core/when-not macro, but
  ;; for some reason, I find myself wanting to use 'unless,
  ;; as in Common Lisp:
  (defmacro unless (condition &amp;amp;rest body)
    `(if (not ,condition) (progn ,@body)))

  ;; What better excuse to start writing my own macros?
  (ns fastidious.macros)

  (defmacro unless
    [condition &amp;amp; body] `(if (not ~condition) (do ~@body)))

  ;; Side bonus: I used my desire for 'unless to drive
  ;; my experiments in integrating macros in ClojureScript,
  ;; with underwhelming success. It just works.
  (ns client.core
    (:require-macros [fastidious.macros :refer [unless]]))

  (let [lisp-is-lame? false]
    (unless lisp-is-lame?
      (println "IFL Lisp.")
      (println "Next up: /c[ad]{1,5}r/"))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See also: &lt;a href="https://github.com/clojure/clojure/blob/28509b8caa95537cddd31152b7603de4d866c951/src/clj/clojure/core.clj#L7204-L7213" target="_blank"&gt;&lt;code&gt;#'clojure.core/some-&amp;gt;&lt;/code&gt;&lt;/a&gt; source on GitHub&lt;/p&gt;</content:encoded></item><item><title>(define the-dream (+ 'scheme 'lilypond))</title><description>&lt;p&gt;&lt;img src="http://blog.ericb.me/content/images/2014/12/output.png" alt="Lilypond Output"&gt;&lt;/p&gt;

&lt;p&gt;Lately I've gotten increasingly obsessed with &lt;a href="http://www.paulgraham.com/lisphistory.html" target="_blank"&gt;Lisp family of programming languages&lt;/a&gt; and am determined to write as little non-Lisp code as possible.&lt;/p&gt;

&lt;p&gt;As such, I've started experimenting with writing more &lt;a href="http://www.lilypond.org/doc/v2.19/Documentation/extending/scheme-in-lilypond" target="_blank"&gt;Scheme in Lilypond&lt;/a&gt;. This is an entirely impractical example, but it gives a glimpse of what's possible. I can't wait&lt;/p&gt;</description><link>http://blog.ericb.me/2014/12/07/the-dream-scheme-lilypond/</link><guid isPermaLink="false">eed057e5-1888-43d8-be37-251b07a2996d</guid><dc:creator>Eric Bailey</dc:creator><pubDate>Sun, 07 Dec 2014 22:47:00 GMT</pubDate><media:content url="http://blog.ericb.me/content/images/2014/12/output.png" medium="image"/><content:encoded>&lt;img src="http://blog.ericb.me/content/images/2014/12/output.png" alt="(define the-dream (+ 'scheme 'lilypond))"&gt;&lt;p&gt;&lt;img src="http://blog.ericb.me/content/images/2014/12/output.png" alt="(define the-dream (+ 'scheme 'lilypond))"&gt;&lt;/p&gt;

&lt;p&gt;Lately I've gotten increasingly obsessed with &lt;a href="http://www.paulgraham.com/lisphistory.html" target="_blank"&gt;Lisp family of programming languages&lt;/a&gt; and am determined to write as little non-Lisp code as possible.&lt;/p&gt;

&lt;p&gt;As such, I've started experimenting with writing more &lt;a href="http://www.lilypond.org/doc/v2.19/Documentation/extending/scheme-in-lilypond" target="_blank"&gt;Scheme in Lilypond&lt;/a&gt;. This is an entirely impractical example, but it gives a glimpse of what's possible. I can't wait to start &lt;a href="http://www.gnu.org/software/guile/manual/guile.html#List-Mapping" target="_blank"&gt;&lt;code&gt;map&lt;/code&gt;ping&lt;/a&gt; lists of musical expressions and &lt;a href="http://lilypondblog.org/2014/07/trees-music-and-lilypond/" target="_blank"&gt;representing music as trees&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note to self&lt;/strong&gt;: Dive deeper into &lt;a href="http://lilypondblog.org/2014/03/music-functions-1-getting-to-grips-with-scheme-in-lilypond/" target="_blank"&gt;these&lt;/a&gt; &lt;a href="http://lilypondblog.org/2014/03/music-functions-2-start-doing-something-useful/" target="_blank"&gt;pertinent&lt;/a&gt; &lt;a href="http://lilypondblog.org/2014/04/music-functions-3-reusing-code/" target="_blank"&gt;blog&lt;/a&gt; &lt;a href="http://lilypondblog.org/2014/04/music-functions-4-recursion/" target="_blank"&gt;posts&lt;/a&gt; ASAP.&lt;/p&gt;

&lt;h2 id="the_dreamscm"&gt;&lt;code&gt;the_dream.scm:&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code class="language-scheme"&gt;(ly:set-option 'midi-extension "mid")

(define changes
  (make-hash-table 4))

(hashq-set!
  riffs 'I
  #{
    \mark \markup { I }
    f4 a c d | f d c a |
    f4 a c d | ees d c b |
    #})

(hashq-set!
  riffs 'IV
  #{
    \mark \markup { IV }
    bes4 d f g | bes g f d |
    #})

(hashq-set!
  riffs 'I'
  #{
    \mark \markup { "I'" }
    f,4 a c d | f d c a |
    #})

(hashq-set!
  riffs 'V
  #{
    \mark \markup { V }
    g a bes b | c bes a g |
    #})

(hashq-set!
  riffs 'turnaround
  #{
    f4 f aes aes | g g ges c |
    #})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="the_dreamly"&gt;&lt;code&gt;the_dream.ly:&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code class="language-latex"&gt;\version "2.19.6"
\include "lilypond-book-preamble.ly"
\paper { oddFooterMarkup = ##f }

#(load "test-01.scm")

\score {
  \relative c' {
    #(hashq-ref riffs 'I)
    \break
    #(hashq-ref riffs 'IV)
    #(hashq-ref riffs 'I')
    \break
    #(hashq-ref riffs 'V)
    #(hashq-ref riffs 'turnaround)
    \bar "|."
  }
  \layout { indent = 0 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id="make_it_rainsh"&gt;&lt;code&gt;make_it_rain.sh:&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;#!/usr/bin/env bash

lilypond "the_dream.ly"  
convert -density 200 "the_dream.pdf" -flatten "output.png"  
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title>icanhazip.com</title><description>&lt;p&gt;Often, I find myself needing to know the public IP address of a box I'm hacking on. &lt;a href="http://icanhazip.com" target="_blank"&gt;icanhazip.com&lt;/a&gt; has become my favorite tool for the task.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;𝛌 curl icanhazip.com # yass, u can
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my experiments it was the fastest, and I've got a penchant for &lt;a href="http://www.catb.org/jargon/html/K/KISS-Principle.html" target="_blank"&gt;KISS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I made &lt;a href="https://gist.github.com/yurrriq/7fc7634dd00494072f45" target="_blank"&gt;a&lt;/a&gt;&lt;/p&gt;</description><link>http://blog.ericb.me/2014/12/06/icanhazip-com/</link><guid isPermaLink="false">ed3126a4-64ab-47ea-8365-89a3f95be687</guid><dc:creator>Eric Bailey</dc:creator><pubDate>Sat, 06 Dec 2014 21:12:00 GMT</pubDate><content:encoded>&lt;p&gt;Often, I find myself needing to know the public IP address of a box I'm hacking on. &lt;a href="http://icanhazip.com" target="_blank"&gt;icanhazip.com&lt;/a&gt; has become my favorite tool for the task.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;𝛌 curl icanhazip.com # yass, u can
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my experiments it was the fastest, and I've got a penchant for &lt;a href="http://www.catb.org/jargon/html/K/KISS-Principle.html" target="_blank"&gt;KISS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I made &lt;a href="https://gist.github.com/yurrriq/7fc7634dd00494072f45" target="_blank"&gt;a gist&lt;/a&gt; with a few backups, just in case.&lt;/p&gt;</content:encoded></item><item><title>i can haz blog?</title><description>&lt;p&gt;So, I installed &lt;a href="https://github.com/tryghost/Ghost" target="_blank"&gt;Ghost&lt;/a&gt; and set up a &lt;a href="https://pages.github.com" target="_blank"&gt;GitHub Pages&lt;/a&gt; &lt;a href="https://github.com/yurrriq/yurrriq.github.io" target="_blank"&gt;repo&lt;/a&gt;. Now I have a blog, I guess.&lt;/p&gt;</description><link>http://blog.ericb.me/2014/12/06/i-can-haz-blog/</link><guid isPermaLink="false">572eef05-8c53-4ec2-b31c-be679c79de39</guid><category>Getting Started</category><dc:creator>Eric Bailey</dc:creator><pubDate>Sat, 06 Dec 2014 19:30:00 GMT</pubDate><content:encoded>&lt;p&gt;So, I installed &lt;a href="https://github.com/tryghost/Ghost" target="_blank"&gt;Ghost&lt;/a&gt; and set up a &lt;a href="https://pages.github.com" target="_blank"&gt;GitHub Pages&lt;/a&gt; &lt;a href="https://github.com/yurrriq/yurrriq.github.io" target="_blank"&gt;repo&lt;/a&gt;. Now I have a blog, I guess.&lt;/p&gt;</content:encoded></item></channel></rss>